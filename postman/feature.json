{
	"info": {
		"_postman_id": "01902702-8d72-4431-a735-9247e85f26ca",
		"name": "\"Explore with me\" Feature comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26106827"
	},
	"item": [
		{
			"name": "Добавление комментария к несуществующему событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"     pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: rnd.getComment(),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=9999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "9999"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"    pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: rnd.getComment(),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "9999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка валидации: пустой комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"                       raw: JSON.stringify({\r",
							"                text: rnd.getWord(0)\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка валидации: размер комментария text.length < 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"                       raw: JSON.stringify({\r",
							"                text: rnd.getWord(4)\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка валидации: размер комментария text.length > 5000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"                       raw: JSON.stringify({\r",
							"                text: rnd.getWord(5001)\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария к событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        comment = rnd.getComment();\r",
							"        comment['state'] = 'PENDING';\r",
							"        pm.collectionVariables.set('response', comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment.text),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						""
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация комментария админом со статусом не PENDING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        comment = await api.publishComment(comment.id);\r",
							"        \r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                text: 'updated comment',\r",
							"                stateAction:'PUBLISH_EVENT'\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отмена публикации комментария админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(source.publishedOn).equal(target.publishedOn, 'Дата опубликования комментария должна соответствовать дате опубликования комментария с указанным идентификатором');",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        comment = await api.publishComment(comment.id);\r",
							"        \r",
							"        comment['state'] = 'CANCELED';\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"        pm.collectionVariables.set('response', comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                stateAction:'REJECT_EVENT'\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация комментария админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(target.publishedOn).to.not.be.null;",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        \r",
							"        comment['state'] = 'PUBLISHED';\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"        pm.collectionVariables.set('response', comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                stateAction:'PUBLISH_EVENT'\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария пользователем после его публикации должен стать PENDING",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        let comment = await api.addComment(user.id, event.id, {text: 'add new comment'});\r",
							"        comment = await api.publishComment(comment.id);\r",
							"        \r",
							"        comment['text'] = 'updated comment';\r",
							"        comment['state'] = 'PENDING';\r",
							"        pm.collectionVariables.set('response', comment);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"       \r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                text: 'updated comment'\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"//        comment = await api.findComment(comment.id, user.id) // этот метод выполнится до основного запроса в котором будет тело body.update({\r",
							"//        pm.request.removeQueryParams(['text', 'categories', 'paid']); // для замены КвериПарам\r",
							"//        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"//const target = pm.response.json()[0]; если массив",
							"//JSON.parse(pm.request.body.raw); если надо взять тело из реквеста",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(source.publishedOn).equal(target.publishedOn, 'Дата опубликования комментария должна соответствовать дате опубликования комментария с указанным идентификатором');",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{commid}}",
							"description": "id текущего комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(source.publishedOn).equal(target.publishedOn, 'Дата опубликования комментария должна соответствовать дате опубликования комментария с указанным идентификатором');",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        comment = await api.publishComment(comment.id);\r",
							"        \r",
							"        pm.collectionVariables.set('response', comment);\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение несуществующего  комментария админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "9999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение не принадлежащего комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        \r",
							"        pm.collectionVariables.set('userId', user.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение принадлежащего комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response'); ",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('event');",
							"pm.expect(target).to.have.property('createdOn');",
							"pm.expect(target).to.have.property('publishedOn');",
							"pm.expect(target).to.have.property('state');",
							"pm.expect(target).to.have.property('text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(source.publishedOn).equal(target.publishedOn, 'Дата опубликования комментария должна соответствовать дате опубликования комментария с указанным идентификатором');",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);  \r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        \r",
							"        pm.collectionVariables.set('response', comment);\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария другим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
							"    pm.response.to.have.status(409);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        comment = await api.publishComment(comment.id);\r",
							"        \r",
							"        pm.collectionVariables.set('response', comment);\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "9999"
						},
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление своего комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {",
							"    pm.response.to.have.status(204);  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('commid', comment.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев у конкретного события со статусом PUBLISHED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const arrTarget = pm.response.json();",
							"const target = arrTarget[0];",
							"const source = pm.collectionVariables.get('response');",
							"",
							"pm.test(\"При запросе по конкретному событию должны получить 1 опубликованный комментарий\", function () {",
							"    pm.expect(arrTarget.length).to.equal(1);",
							"});",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, author, event, createdOn, publishedOn state, text\", function () {",
							"    pm.expect(target).to.contain.keys('id', 'author', 'event', 'createdOn', 'publishedOn', 'state', 'text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id.toString()).equal(target.id.toString(), 'ИД комментария должен соответствовать ИД комментарию с указанным идентификатором');",
							"    pm.expect(source.author.id).equal(target.author.id, 'Автор комментария должен соответствовать автору комментария с указанным идентификатором');",
							"    pm.expect(source.event.id).equal(target.event.id, 'Cобытия комментария должен соответствовать событию комментарию с указанным идентификатором');",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате создания комментария с указанным идентификатором');",
							"    pm.expect(source.publishedOn).equal(target.publishedOn, 'Дата опубликования комментария должна соответствовать дате опубликования комментария с указанным идентификатором');",
							"    pm.expect(source.state).equal(target.state, 'Статус комментария должен соответствовать статусу комментария с указанным идентификатором');",
							"    pm.expect(source.text).equal(target.text, 'Комментарий должен соответствовать комментарию с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        let comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        comment = await api.publishComment(comment.id);\r",
							"\r",
							"        pm.collectionVariables.set('response', comment);      \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск комментариев с параметрами админoм",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"При запросе без uris должны получить больше 1 записи\", function () {",
							"    pm.expect(target.length).to.be.equal(2);",
							"});",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, author, event, createdOn, publishedOn state, text\", function () {",
							"    pm.expect(target[0]).to.contain.keys('id', 'author', 'event', 'createdOn', 'publishedOn', 'state', 'text');",
							"     pm.expect(target[1]).to.all.keys('id', 'author', 'event', 'createdOn', 'publishedOn', 'state', 'text');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(\"PENDING\").equal(target[0].state, 'Статус комментария должен соответствовать статусу комментария в запросе');",
							"    pm.expect(\"PENDING\").equal(target[1].state, 'Статус комментария должен соответствовать статусу комментария в запросе');",
							"});",
							"",
							"pm.test(\"В теле ответа должна соблюдаться сортировка по убыванию даты создания комментария\", function(){",
							"    pm.expect(target[0].id).to.be.above(target[1].id);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        await api.publishEvent(event.id);\r",
							"        await api.addComment(user.id, event.id, rnd.getComment())\r",
							"        await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        const comment3 = await api.addComment(user.id, event.id, rnd.getComment());\r",
							"        await api.publishComment(comment3.id);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/comments?users={{uid}}&states=PENDING&events={{eid}}&from=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "users",
							"value": "{{uid}}"
						},
						{
							"key": "states",
							"value": "PENDING"
						},
						{
							"key": "events",
							"value": "{{eid}}"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск комментариев без параметров админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, author, event, createdOn, publishedOn, state, text\", function () {",
							"    pm.expect(target[0]).to.contain.keys('id', 'author', 'event', 'createdOn', 'publishedOn', 'state', 'text');",
							"});",
							"",
							"pm.test(\"При запросе без параметров должны получить больше 9 записей\", function () {",
							"    pm.expect(target.length).to.be.above(9);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments/?eventId=\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishComment(commentId, verbose=null) {",
					"        return this.patch(\"/admin/comments/\" + commentId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации комментария\", verbose);",
					"    }",
					"",
					"    async findComment(commentId, userId, verbose=null) {",
					"        return this.get(\"/admin/comments/\" + commentId + \"?userId=\" + userId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userIds, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userIds, null, \"Ошибка при поиске пользователей по ids\", verbose);",
					"    }",
					"/*",
					"    async getAllComments(uris=null, verbose=null) {",
					"        return this.get(uris == null ? \"/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00\" : \"/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=\"+uris.join('&uris='), null, \"Ошибка при сохранении информации о запросе к эндпойнту: \", verbose);",
					"    }",
					"*/",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "commid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		}
	]
}